#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <windows.h>
#include <time.h>
void error_handling(char *message);
int main(int argc, char *argv[])
{
 int serv_sock;
 int clnt_sock;
 int bingo;
 int num;
 int i = 0;
 int ing = 0;
 int random = 0;

 struct sockaddr_in serv_addr;
 struct sockaddr_in clnt_addr;
 socklen_t clnt_addr_size;

 char message[]="Game Start";
 char answer[]="정답입니다";
 char big[]="더 작아야합니다";
 char small[]="더 커야합니다";
 char end[]="끝났습니다";

 if(argc!=2)
 {
 printf("Usage : %s <port>\n", argv[0]);
 exit(1);
 }

 serv_sock=socket(PF_INET, SOCK_STREAM, 0);
 if(serv_sock == -1)
 error_handling("socket() error");

 memset(&serv_addr, 0, sizeof(serv_addr));
 serv_addr.sin_family=AF_INET;
 serv_addr.sin_addr.s_addr=htonl(INADDR_ANY);
 serv_addr.sin_port=htons(atoi(argv[1]));

 if(bind(serv_sock, (struct sockaddr*) &serv_addr, sizeof(serv_addr))==-1)
 error_handling("listen() error");

 if(listen(serv_sock, 5)==-1)
 error_handling("listen() error");

 clnt_addr_size=sizeof(clnt_addr);
 clnt_sock=accept(serv_sock, (struct sockaddr*)&clnt_addr, &clnt_addr_size);
 if(clnt_sock==-1)
 error_handling("accept() error");

 // printf("1~50 사이의 정수를 입력하세요: "); // 게임숫자 입력 (랜덤 수로 적용)
 // scanf("%d", &bingo);
 srand(time(NULL)); // 매번 다른 값 생성
 random = rand()%50+1; // 랜덤 수 생성
 printf("%d\n", random);
 write(clnt_sock, message, sizeof(message)); // gamestart메세지 전송
 while (i<20) // 20번 반복
 {
 read(clnt_sock, &num, sizeof(num)); // client에서 입력한 수 수신
 if (num > random) // 정답 숫자와 비교
 {
 write(clnt_sock, &ing, sizeof(ing)); // 정답인지 확인하는 메시지 전송
 write(clnt_sock, big, sizeof(big)); // 비교 메시지 전송
 i++;
 }
 else if (num < random)
 {
 write(clnt_sock, &ing, sizeof(ing));
 write(clnt_sock, small, sizeof(small));
 i++;
 }
 else
 {
 ing++;
 write(clnt_sock, &ing, sizeof(ing));
 write(clnt_sock, answer, sizeof(answer));
 break; // 정답일시 while문 탈출
 }
 }
 Sleep(100); // 대기 없으면 end메세지 오류
 write(clnt_sock, end, sizeof(end)); // end메세지 전송

 close(clnt_sock);
 close(serv_sock);
 return 0;
}
void error_handling(char *message)
{
 fputs(message, stderr);
 fputc('\n', stderr);
 exit(1);
}
