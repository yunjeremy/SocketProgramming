#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <time.h>
void error_handling(char *message);
int lineArr[25];
int line[5][5];
int i, j, k, l[25];
int running = 1;
int sock;
// 빙고판 만들기
void getRandomNumber()
{
 srand(time(NULL));
 for(i=0; i<25;)
 {
 l[i]=rand()%25+1;
 for(j=0,k=0; j<i; j++)
 {
 if(l[i]==l[j])
 {
 k=1; break;
 }
 }
 if(k==0)
 i=i+1;
 }
 for(i=0; i<25; i++) // lineArr[]에 랜덤으로 숫자 입력 1~25
 {
 lineArr[i] = l[i];
 }
 for(i=0; i<5; i++)
 {
 for(j=0; j<5; j++)
 {
 line[j][i] = lineArr[i+j*5];
 }
 }
}
// lineArr[] 5개마다 line_1,2,3,4,5[]에 입력
void printLine()
{
 for(i=0; i<5; i++)
 {
 for(j=0; j<5; j++)
 {
 printf("%d\t", line[j][i]);
 }
 printf("\n");
 }
}
// 숫자 입력
void inputNumber()
{
 int choiceNum;
 printf("숫자 입력 : ");
 scanf("%d", &choiceNum);
 write(sock, &choiceNum, sizeof(choiceNum));
 system("clear");

 for(i=0; i<5; i++)
 {
 for(j=0; j<5; j++)
 {
 if(choiceNum == line[j][i])
 line[j][i] = 0;
 }
 }
}
// 가로 빙고
void hBingo()
{
 for(i=0; i<5; i++)
 {
 for(j=0; j<5; j++)
 {
 if(line[i][j]!=0)
 {
 break;
 }
 }
 if(j==5)
 {
 system("clear");
 printf("BINGO!!");
 running = 0;
 }
 }
}
// 세로 빙고
void vBingo()
{
 for(i=0; i<5; i++)
 {
 for(j=0; j<5; j++)
 {
 if(line[j][i]!=0)
 {
 break;
 }
 }
 if(j==5)
 {
 system("clear");
 printf("BINGO!!");
 running = 0;
 }
 }
}
// 대각선 빙고
void dBingo()
{
 for(i=0; i<5; i++)
 {
 if(line[i][i]!=0)
 {
 break;
 }
 }
 if(i==5)
 {
 system("clear");
 printf("BINGO!!");
 running = 0;
 }
}
// 대각선 빙고2
void ddBingo()
{
 if(line[0][4]==0 & line[1][3]==0 & line[2][2]==0 & line[3][1]==0 & line[4][0]==0)
 {
 system("clear");
 printf("BINGO!!");
 running = 0;
 }
}
int main(int argc, char* argv[])
{
struct sockaddr_in serv_addr;
char message[30];
if(argc!=3)
{
printf("Usage : %s <IP> <port>\n", argv[0]);
exit(1);
}
sock=socket(PF_INET, SOCK_STREAM, 0);
if(sock == -1)
error_handling("socket() error");
memset(&serv_addr, 0, sizeof(serv_addr));
serv_addr.sin_family=AF_INET;
serv_addr.sin_addr.s_addr=inet_addr(argv[1]);
serv_addr.sin_port=htons(atoi(argv[2]));
if(connect(sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr))==-1)
error_handling("connect() error!");
getRandomNumber(); // 빙고판 생성
 printLine(); // 빙고판 출력
inputNumber(); // 숫자 입력
printLine();
close(sock);
return 0;
}
void error_handling(char *message)
{
fputs(message, stderr);
fputc('\n', stderr);
exit(1);
}
